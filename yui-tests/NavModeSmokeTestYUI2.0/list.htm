<html>
<head>
<title>Nav Mode Smoke Test - List</title>
<style type="text/css">
/*margin and padding on body element
  can introduce errors in determining
  element position and are not recommended;
  we turn them off as a foundation for YUI
  CSS treatments. */
body {
	margin:0;
	padding:0;
}
</style>
<link rel="stylesheet" type="text/css" href="yui2.9.0/build/logger/assets/skins/sam/logger.css" />
<link rel="stylesheet" type="text/css" href="yui2.9.0/build/fonts/fonts-min.css" />
<link rel="stylesheet" type="text/css" href="yui2.9.0/build/yuitest/assets/skins/sam/yuitest.css" />
<script type="text/javascript" src="yui2.9.0/build/yahoo-dom-event/yahoo-dom-event.js"></script>
<script type="text/javascript" src="yui2.9.0/build/logger/logger-min.js"></script>
<script type="text/javascript" src="yui2.9.0/build/yuitest/yuitest-min.js"></script>
<link rel="stylesheet" type="text/css" href="StyleSheet.css" />
<script type="text/javascript">
    function highlight(e) {
       e.setAttribute("style", "background-color: red; outline-style: dotted; outline-color: blue");
    }

    function unhighlight(e) {
       e.setAttribute("style", "");
    }
</script>
<!-- load navmode-browser.js BEFORE  navmode.js, blackberry.focus needs to be defined first -->
<script type="text/javascript" src="navmode-browser.js"></script>
<!-- replace navmode.js from the one in current build's ext folder -->
<script type="text/javascript" src="navmode.js"></script>
<!-- load navmode-browser-direction.sj AFTER navmode.js, navigationController needs to be defined first -->
<script type="text/javascript" src="navmode-browser-direction.js"></script>

</head>
<body class="yui-skin-sam">
    <label id="label1" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" ><b>Test the list elements:</b></label>
    <hr /><br />
    <label><b>Definition list:</b></label>
    <dl id="parentDefList" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >
        <dt id="childDefList1" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >Coffee</dt>
        <dd id="childDefList2" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >- Hot beverage</dd>
        <dt id="childDefList3" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >Milk</dt>
        <dd id="childDefList4" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >- Cold beverage</dd>
    </dl>
    <br />
    <label><b>Ordered list:</b></label>
    <ol id="parentOrderedList" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >
        <li id="childOrderedList1" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >Coffee</li>
        <li id="childOrderedList2" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >Tea</li>
        <li id="childOrderedList3" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >Milk</li>
    </ol>
    <br />
    <label><b>Unordered list:</b></label>
    <ul id="parentUnorderedList" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >
        <li id="childUnorderedList1" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >Coffee</li>
        <li id="childUnorderedList2" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >Tea</li>
        <li id="childUnorderedList3" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >Milk</li>
    </ul>
    <br /><hr /><br />
    <label><b>Test the elements [h1] - [h6]:</b></label>
    <h1 id="headler1" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >This is heading 1</h1>
    <h2 id="headler2" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >This is heading 2</h2>
    <h3 id="headler3" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >This is heading 3</h3>
    <h4 id="headler4" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >This is heading 4</h4>
    <h5 id="headler5" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >This is heading 5</h5>
    <h6 id="headler6" x-blackberry-focusable="true" onmouseover="highlight(this)" onmouseout="unhighlight(this)" >This is heading 6</h6>
	<br>
	<br>
	<br>
	<div id="testLogger"></div>
	<script type="text/javascript">
	YAHOO.namespace("navmode.yuitest");


	YAHOO.navmode.yuitest.BasicTestCase = new YAHOO.tool.TestCase({

	    //name of the test case - if not provided, one is auto-generated
	    name : "Nav Mode Smoke Test",

	    //---------------------------------------------------------------------
	    // setUp and tearDown methods - optional
	    //---------------------------------------------------------------------

	    /*
	     * Sets up data that is needed by each test.
	     */
	    setUp : function() {

	    },

	    /*
	     * Cleans up everything that was created by setUp().
	     */
	    tearDown : function() {

	    },

	    //---------------------------------------------------------------------
	    // Test methods - names must begin with "test"
	    //---------------------------------------------------------------------

	    testInitialFocus : function() {
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("label1", blackberry.focus.getFocus());
	    },

	    testDown1 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childDefList1", blackberry.focus.getFocus());
	    },

	    testPriorFocus : function() {
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("label1", blackberry.focus.getPriorFocus());
	    },
		
		testDown1to2 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("parentDefList", blackberry.focus.getFocus());
	    },
		
		testDown2 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childDefList2", blackberry.focus.getFocus());
	    },
		
		testDown3 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childDefList3", blackberry.focus.getFocus());
	    },
		
		testDown4 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childDefList4", blackberry.focus.getFocus());
	    },
		
		testDown5 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childOrderedList1", blackberry.focus.getFocus());
	    },
		
		testDown5to6 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("parentOrderedList", blackberry.focus.getFocus());
	    },
		
		testDown6 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childOrderedList2", blackberry.focus.getFocus());
	    },
		
		testDown7 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childOrderedList3", blackberry.focus.getFocus());
	    },
		
		testDown8 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childUnorderedList1", blackberry.focus.getFocus());
	    },
		
		testDown8to9 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("parentUnorderedList", blackberry.focus.getFocus());
	    },
		
		testDown9 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childUnorderedList2", blackberry.focus.getFocus());
	    },
		
		testDown10 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childUnorderedList3", blackberry.focus.getFocus());
	    },
	
		testDown11 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("headler1", blackberry.focus.getFocus());
	    },
			/*
		testDown12 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("headler2", blackberry.focus.getFocus());
	    },
		
		testDown13 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("headler3", blackberry.focus.getFocus());
	    },
		
		testDown14 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("headler4", blackberry.focus.getFocus());
	    },
		
		testDown15 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("headler5", blackberry.focus.getFocus());
	    },
		
		testDown16 : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.DOWN,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("headler6", blackberry.focus.getFocus());
	    },*/

	    testLeft : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.LEFT,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("headler1", blackberry.focus.getFocus());
	    },

	    testRight : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.RIGHT,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("headler1", blackberry.focus.getFocus());
	    },

	    testUp : function() {
		blackberry.focus.onScroll({
		    "direction" : blackberry.focus.UP,
		    "delta" : 1,
		    "zoomScale" : 1,
		    "virtualHeight" : document.body.clientHeight,
		    "virtualWidth" : document.body.clientWidth,
		    "verticalScroll" : 0,
		    "horizontalScroll" : 0,
		    "height" : screen.height,
		    "width" : screen.width
		});
		var Assert = YAHOO.util.Assert;
		Assert.areEqual("childUnorderedList3", blackberry.focus.getFocus());
	    }
	});

	YAHOO.navmode.yuitest.BasicSuite = new YAHOO.tool.TestSuite("Nav Mode Smoke Test Suite");
	YAHOO.navmode.yuitest.BasicSuite.add(YAHOO.navmode.yuitest.BasicTestCase);

	YAHOO.util.Event.onDOMReady(function() {
	    // create the logger
	    var logger = new YAHOO.widget.LogReader("testLogger"); //*/new YAHOO.tool.TestLogger("testLogger", {verboseOutput: true});
	    logger.hideCategory("global");
	    logger.hideCategory("window");
	    logger.hideSource("LogReader");
	    var TestRunner = YAHOO.tool.TestRunner;
	    TestRunner.add(YAHOO.navmode.yuitest.BasicSuite);

	    //function to handle events generated by the testrunner
	    function logEvent(event) {

		//data variables
		var message = "", messageType = "";

		switch (event.type) {
		case TestRunner.BEGIN_EVENT:
		    message = "Testing began at " + (new Date()).toString() + ".";
		    messageType = "info";
		    break;

		case TestRunner.COMPLETE_EVENT:
		    message = YAHOO.lang.substitute("Testing completed at " + (new Date()).toString() + ".\n"
			    + "Passed:{passed} Failed:{failed} " + "Total:{total} ({ignored} ignored)",
			    event.results);
		    messageType = "info";
		    break;

		case TestRunner.TEST_FAIL_EVENT:
		    message = event.testName + ": failed.\n" + event.error.getMessage();
		    messageType = "fail";
		    break;

		case TestRunner.TEST_IGNORE_EVENT:
		    message = event.testName + ": ignored.";
		    messageType = "ignore";
		    break;

		case TestRunner.TEST_PASS_EVENT:
		    message = event.testName + ": passed.";
		    messageType = "pass";
		    break;

		case TestRunner.TEST_SUITE_BEGIN_EVENT:
		    message = "Test suite \"" + event.testSuite.name + "\" started.";
		    messageType = "info";
		    break;

		case TestRunner.TEST_SUITE_COMPLETE_EVENT:
		    message = YAHOO.lang.substitute("Test suite \"" + event.testSuite.name + "\" completed" + ".\n"
			    + "Passed:{passed} Failed:{failed} " + "Total:{total} ({ignored} ignored)",
			    event.results);
		    messageType = "info";
		    break;

		case TestRunner.TEST_CASE_BEGIN_EVENT:
		    message = "Test case \"" + event.testCase.name + "\" started.";
		    messageType = "info";
		    break;
		case TestRunner.TEST_CASE_COMPLETE_EVENT:
		    message = YAHOO.lang.substitute("Test case \"" + event.testCase.name + "\" completed.\n"
			    + "Passed:{passed} Failed:{failed} " + "Total:{total} ({ignored} ignored)",
			    event.results);
		    messageType = "info";
		    break;
		default:
		    message = "Unexpected event " + event.type;
		    message = "info";
		}

		//only log if required
		YAHOO.log(message, messageType, "TestRunner");
	    }

	    //listen for events to publish to the logger
	    TestRunner.subscribe(TestRunner.BEGIN_EVENT, logEvent);
	    TestRunner.subscribe(TestRunner.COMPLETE_EVENT, logEvent);
	    TestRunner.subscribe(TestRunner.TEST_CASE_BEGIN_EVENT, logEvent);
	    TestRunner.subscribe(TestRunner.TEST_CASE_COMPLETE_EVENT, logEvent);
	    TestRunner.subscribe(TestRunner.TEST_SUITE_BEGIN_EVENT, logEvent);
	    TestRunner.subscribe(TestRunner.TEST_SUITE_COMPLETE_EVENT, logEvent);
	    TestRunner.subscribe(TestRunner.TEST_PASS_EVENT, logEvent);
	    TestRunner.subscribe(TestRunner.TEST_FAIL_EVENT, logEvent);
	    TestRunner.subscribe(TestRunner.TEST_IGNORE_EVENT, logEvent);


	    // run the tests
	    YAHOO.tool.TestRunner.run();
	});

    </script>

</body>
</html>
